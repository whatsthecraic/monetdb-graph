# Exporting the graph functions to monetdb
# ln -s graph.mal <monetdb>/lib/monetdb5
module graph;

command load(:str) (:bat[:oid],:bat[:oid],:bat[:lng])
address GRAPHload
comment "Import a graph produced by the utility randomgen into three bats <from, to, weight>"; 

command loadq(:str) (:bat[:oid],:bat[:oid])
address GRAPHloadq
comment "Import a set of queries from the given file, where each line is <from> <to>"; 

command save(path :str, qfrom :bat[:oid], qto :bat[:oid], weights :bat[:lng], poid :bat[:oid], ppath :bat[:oid])
address GRAPHsave
comment "Store the result of the operator to an output file, to be validated externally"; 

command prefixsum(:bat[:oid], :lng) :bat[:oid]
address GRAPHprefixsum
comment "Perform the prefix sum of the values in the BAT";

function make(from:bat[:oid], to:bat[:oid], weights:bat[:lng]) (:bat[:oid], :bat[:oid], :bat[:lng]);
  # check inputs have the same input size
  from_sz := aggr.count(from);
  to_sz := aggr.count(to);
  weights_sz := aggr.count(weights);
  # it should check also whether it contains nil values 
  # maybe this should be implemented in C...
  
  (fs, perm) := algebra.subsort(from, false, false);
  ft := algebra.projection(perm, to);
  fw := algebra.projection(perm, weights);
  
  # perform the prefix sum
  fs_ps := graph.prefixsum(fs, from_sz);
  
  return (fs_ps, ft, fw);
end make;

command spfw(qfperm:bat[:oid], qtperm:bat[:oid], qfval:bat[:oid], qtval:bat[:oid], V:bat[:oid], E:bat[:oid]) (:bat[:oid])
address GRAPHconnected
comment "Filter out the tuples that are connected in the graph, regardless of their distance";

# Return the `partno' partition of `from' and `to' columns, out of `numpart' partitions.
function scatter(from:bat[:oid], to:bat[:oid], partno:int, numpart:int) (:bat[:oid], :bat[:oid]);
  # check inputs have the same input size
  from_sz := aggr.count(from);
  to_sz := aggr.count(to);
  barrier chk1 := from_sz != to_sz;
    raise IllegalArgument := "Invalid input size";
  exit chk1;

  part_from := bat.partition(from, numpart, partno);
  part_to := bat.partition(to, numpart, partno);
  
  return (part_from, part_to);
end scatter;